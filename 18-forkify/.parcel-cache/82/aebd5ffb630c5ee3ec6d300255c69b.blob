"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.updateServings = exports.state = exports.loadSearchResults = exports.loadRecipe = exports.getSearchResultsPage = exports.deleteBookmark = exports.addBookmark = void 0;

var _config = require("./config.js");

var _helpers = require("./helpers.js");

const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
};
exports.state = state;

const createRecipeObject = function (data) {
  const {
    recipe
  } = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients
  };
};

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}${id}`);
    state.recipe = createRecipeObject(data); // console.log(res, data);

    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
    console.log(state.recipe);
  } catch (err) {
    // Temp error handling
    console.error(`${err} ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥`);
    throw err;
  }
};

exports.loadRecipe = loadRecipe;

const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}?search=${query}`); // console.log(data);

    state.search.results = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url
      };
    });
    state.search.page = 1;
  } catch (err) {
    console.error(`${err} ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥`);
    throw err;
  }
};

exports.loadSearchResults = loadSearchResults;

const getSearchResultsPage = function () {
  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state.search.page;
  state.search.page = page; // 0 based

  const start = (page - 1) * state.search.resultsPerPage; // 0; ---> 2-1 is 1, *10 is 10. (for page 2, etc, etc)

  const end = page * state.search.resultsPerPage; // 9;
  // console.log(start, end);

  return state.search.results.slice(start, end);
};

exports.getSearchResultsPage = getSearchResultsPage;

const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServings / state.recipe.servings; // newQt = oldQt * newServings / oldServings // 2 * 8 / 4 = 4
  });
  state.recipe.servings = newServings;
};

exports.updateServings = updateServings;

const persistBookmarks = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};

const addBookmark = function (recipe) {
  // Add bookmark
  state.bookmarks.push(recipe); // Mark current recipe as bookmark

  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  persistBookmarks();
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  // find the index
  const index = state.bookmarks.findIndex(el => el.id === id); // delete it from the bookmarks array.

  state.bookmarks.splice(index, 1); // Mark current recipe as NOT bookmarked.

  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
};

exports.deleteBookmark = deleteBookmark;

const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};

init(); // console.log(state.bookmarks);
// Dev code to debug, turn off init() and turn on clearBookmarks() so bookmarks are cleared from local storage automatically on page refresh.

const clearBookmarks = function () {
  localStorage.clear('bookmarks');
}; // clearBookmarks();


const uploadRecipe = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].replaceAll(' ', '').split(','); // can test if the array has a length of 3. If it doesn't, function will immediately exit.

      if (ingArr.length !== 3) throw new Error('Wrong ingredient format! Please use the correct format :)'); // replace all spaces with an empty string. Then split on the comma. Will return an array

      const [quantity, unit, description] = ingArr; // quantity if it exists, should convert to a number, if it doesn't, we want it to be null.

      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    }; // console.log(recipe);

    const data = await (0, _helpers.sendJSON)(`${_config.API_URL}?key=${_config.KEY}`, recipe);
    state.recipe = createRecipeObject(data);
  } catch (err) {
    throw err;
  }
};

exports.uploadRecipe = uploadRecipe;